{"version":3,"sources":["AppStyles.js","components/header/HeaderStyles.js","components/header/Header.js","components/content/ContentStyles.js","components/resources/bald-eagle-preloaded.jpg","components/content/Results.js","components/resources/bald-eagle-preloaded-with-text.jpg","components/content/SelectImage.js","components/content/Content.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["PageWrap","styled","div","HeaderWrap","Header","ContentWrap","Results","classifications","style","backgroundColor","textAlign","display","flexDirection","justifyContent","alignItems","PieChart","width","height","onClick","Pie","dataKey","isAnimationActive","data","cx","cy","outerRadius","fill","label","midAngle","innerRadius","value","index","RADIAN","Math","PI","radius","x","cos","y","sin","textAnchor","dominantBaseline","name","Label","offset","position","Tooltip","alignSelf","color","SelectImage","props","useState","preloadedImg","image","setImage","cropper","setCropper","fileInput","useRef","initialAspectRatio","src","viewMode","guides","minCropBoxHeight","minCropBoxWidth","responsive","background","autoCropArea","checkOrientation","onInitialized","instance","ref","type","onChange","e","files","preventDefault","dataTransfer","target","reader","FileReader","onload","result","readAsDataURL","id","className","setSelectImage","current","click","alert","setImg","getCroppedCanvas","toDataURL","Content","renderResults","setRenderResults","selectImage","img","setTimeout","App","useEffect","document","title","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a10c604.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const PageWrap = styled.div`\r\n\tfont-size: 10px;   /*1rem = 10px*/\r\n  background-color: #FAFAFF;\r\n  min-height:100vh;\r\n  max-width: 100%;\r\n  overflow-x: hidden;\r\n\r\n  color: #273469; \r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const HeaderWrap = styled.div`\r\n  padding: 1.4rem 0;\r\n  align-self: center;\r\n  flex-shrink: 2;\r\n  @media(min-width: 1024px) {\r\n    align-self: auto;\r\n  }\r\n\r\n  h1 {\r\n    margin-left: 1.4rem;\r\n    font-size: 2rem;\r\n    \r\n  }\r\n`;","import React from 'react';\r\nimport { HeaderWrap } from './HeaderStyles';\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <HeaderWrap>\r\n      <h1>PWA Birdifier</h1>\r\n    </HeaderWrap>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContentWrap = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100%;\r\n  width: 100%;\r\n\r\n  div {\r\n    flex: 1;\r\n  }\r\n\r\n  @media(min-width: 1024px) {\r\n    width: 40rem;\r\n    margin:0 auto;\r\n  }\r\n\r\n  .currentImage {\r\n    display: flex;\r\n  }\r\n\r\n  .currentImage img {\r\n    height: auto;\r\n    width: 100%;\r\n    align-self: flex-end;\r\n  }\r\n\r\n  .btn-group {\r\n    flex-grow: 0;\r\n  }\r\n\r\n  .btn-group button {\r\n    width: 33.3%;\r\n    border: 1px solid #FAFAFF;\r\n    padding: 15px 24px; \r\n    @media(max-width: 350px) {\r\n      padding: 10px 10px;\r\n    }\r\n  }\r\n\r\n  .btn-group button:not(:last-child) {\r\n    border-right: none;\r\n  }\r\n\r\n  button, input > button {\r\n    background-color: #8884d8;\r\n    cursor: pointer;\r\n    color: #FAFAFF;\r\n    font-family: inherit;\r\n  }\r\n`;","export default __webpack_public_path__ + \"static/media/bald-eagle-preloaded.991dc657.jpg\";","\r\nimport React  from 'react';\r\nimport { PieChart, Pie, Tooltip, Label } from 'recharts';\r\n\r\nfunction Results({ classifications }) {\r\n  const resultStyle = {\r\n    backgroundColor: '#273469',   \r\n    textAlign: 'center',\r\n    display: 'flex',\r\n    flexDirection:' column',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center'\r\n  };\r\n\r\n  const h2Style = {\r\n    alignSelf: 'center',\r\n    color: '#FAFAFF',\r\n  };\r\n  \r\n  return (\r\n    <div style={resultStyle}>\r\n      <PieChart width={400} height={400} onClick={() => {}}>\r\n      <Pie\r\n      dataKey=\"value\"\r\n      isAnimationActive={true}\r\n      data={classifications}\r\n      cx={200}\r\n      cy={200}\r\n      outerRadius={65}\r\n      fill=\"#8884d8\"\r\n      label={({\r\n          cx,\r\n          cy,\r\n          midAngle,\r\n          innerRadius,\r\n          outerRadius,\r\n          value,\r\n          index\r\n        }) => {\r\n          const RADIAN = Math.PI / 180;\r\n          // eslint-disable-next-line\r\n          const radius = 25 + innerRadius + (outerRadius - innerRadius);\r\n          // eslint-disable-next-line\r\n          const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n          // eslint-disable-next-line\r\n          const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n          return (\r\n            <text\r\n              x={x}\r\n              y={y}\r\n              fill=\"#8884d8\"\r\n              textAnchor={x > cx ? \"start\" : \"end\"}\r\n              dominantBaseline=\"central\"\r\n            >\r\n              {classifications[index].name} ({value})\r\n            </text>\r\n          );\r\n        }}\r\n      />\r\n      <Label value=\"Detection confidence / %\" offset={0} position=\"insideBottom\" />\r\n      <Tooltip />\r\n      </PieChart>\r\n      <h2 style={h2Style}>Detection confidence / %</h2>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Results;","export default __webpack_public_path__ + \"static/media/bald-eagle-preloaded-with-text.6e8412b5.jpg\";","import React, { useState, useRef } from \"react\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport preloadedImg from '../resources/bald-eagle-preloaded-with-text.jpg';\r\nimport { ContentWrap } from './ContentStyles';\r\n\r\nfunction SelectImage(props) {\r\n  const [image, setImage] = useState(preloadedImg);\r\n  const [cropper, setCropper] = useState();\r\n\r\n  const fileInput = useRef(null);\r\n\r\n  const onChange = (e) => {\r\n    e.preventDefault();\r\n    let files;\r\n    if (e.dataTransfer) {\r\n      files = e.dataTransfer.files;\r\n    } else if (e.target) {\r\n      files = e.target.files;\r\n    }\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImage(reader.result);\r\n    };\r\n    reader.readAsDataURL(files[0]);\r\n  };\r\n\r\n  const getCropData = () => {\r\n    if (image === '/static/media/bald-eagle-preloaded-with-text.6e8412b5.jpg') {\r\n      alert(\"Preloaded image cannot be cropped\");\r\n    } else if (typeof cropper !== \"undefined\") {\r\n      props.setImg(cropper.getCroppedCanvas().toDataURL());\r\n      props.setSelectImage(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n      <Cropper\r\n        style={{ alignSelf: 'flex-end', width: \"100%\" }}\r\n        initialAspectRatio={1}\r\n        src={image}\r\n        viewMode={1}\r\n        guides={true}\r\n        minCropBoxHeight={10}\r\n        minCropBoxWidth={10}\r\n        responsive={true}\r\n        background={false}\r\n        autoCropArea={1}\r\n        checkOrientation={false}\r\n        onInitialized={(instance) => {\r\n        setCropper(instance);\r\n        }}\r\n      />\r\n      <input style={{ display: 'none' }} ref={fileInput} type=\"file\" onChange={onChange} />\r\n      <div id=\"crop\" className=\"btn-group\">\r\n      <button onClick={() => props.setSelectImage(false)}>Cancel</button>\r\n      <button\r\n        onClick={() => fileInput.current.click()}\r\n      >Browse</button>\r\n        <button onClick={() => getCropData()}>Crop</button>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default SelectImage;\r\n","import React, { useState } from 'react';\r\nimport { ContentWrap } from './ContentStyles';\r\nimport preloadedImg from '../resources/bald-eagle-preloaded.jpg';\r\nimport Results from './Results';\r\nimport SelectImage from './SelectImage';\r\n\r\nfunction Content() {\r\n  const [classifications, setClassifications] = useState([\r\n    { name:  'Bald Eagle', value: 90 },\r\n    { name:  'Golden Eagle', value: 7 },\r\n    { name:  'Turkey Vulture', value: 3 },\r\n  ]);\r\n  const [renderResults, setRenderResults] = useState(false);\r\n  const [selectImage, setSelectImage] = useState(false);\r\n  const [img, setImg] = useState(preloadedImg);\r\n\r\n  const classify = () => {\r\n    if (selectImage === false) {\r\n      setTimeout(() => {\r\n        setRenderResults(true);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const selectImageOnClick = () => {\r\n    if (renderResults) {\r\n      setRenderResults(false);\r\n    }\r\n    return setSelectImage(true);\r\n  }\r\n\r\n  return (\r\n    <ContentWrap>\r\n      {renderResults === true ?\r\n        <Results classifications={classifications}/>\r\n      : null}\r\n      {selectImage === true ?\r\n        <SelectImage setSelectImage={setSelectImage} setImg={setImg}/>\r\n      : <div className=\"currentImage\">\r\n          <img src={img}></img>\r\n        </div>}\r\n      <div className=\"btn-group\">\r\n        <button onClick={() => selectImageOnClick()}>Select file</button>\r\n        <button onClick={() => setRenderResults(false)}>Take photo</button>\r\n        <button onClick={() => classify()}>Classify</button>\r\n      </div>\r\n    </ContentWrap>\r\n  );\r\n}\r\n\r\nexport default Content;","import React, { useEffect } from 'react';\r\nimport { PageWrap } from './AppStyles';\r\nimport Header from './components/header/Header';\r\nimport Content from './components/content/Content';\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    document.title = \"PWA Birdifier\"\r\n  }, []);\r\n\r\n  return (\r\n    <PageWrap>\r\n      <Header/>\r\n      <Content/>\r\n    </PageWrap>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}